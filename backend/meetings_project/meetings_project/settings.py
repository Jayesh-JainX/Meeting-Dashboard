"""
Django settings for meetings_project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file for development (optional, Railway uses its own env var system)
# from dotenv import load_dotenv
# load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# For production, set this in your environment variables (e.g., on Railway).
# Generate a new key using: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-dev-key-CHANGE-ME')

# SECURITY WARNING: don't run with debug turned on in production!
# For production, set DEBUG = False via an environment variable.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' # Defaults to True for dev if not set

# ALLOWED_HOSTS
# For production, set this in your environment variables on Railway.
# Example: your-app-name.up.railway.app,yourcustomdomain.com
ALLOWED_HOSTS_ENV = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = ALLOWED_HOSTS_ENV.split(',')
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1'] # Default for local development

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',        # Django REST Framework
    'rest_framework.authtoken', # For token authentication (optional, session is default)
    'api',                   # Our api app
    'corsheaders',           # For Cross-Origin Resource Sharing
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Should be high up
    'whitenoise.middleware.WhiteNoiseMiddleware',    # Whitenoise for static files
    'corsheaders.middleware.CorsMiddleware',         # CORS middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meetings_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meetings_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        # Fallback to SQLite for local development if DATABASE_URL is not set
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,      # Recommended for persistent connections
        conn_health_checks=True # Recommended for Railway
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# For production with Whitenoise:
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication', # For browser-based interaction and login
        # 'rest_framework.authentication.TokenAuthentication', # If you prefer token-based auth for APIs
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    ]
}

# CORS settings
# For development, allowing all origins is fine. For production, specify origins.
CORS_ALLOW_CREDENTIALS = True # Important for session-based auth with frontend on different domain/port

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://localhost:5173', # Vite default if not 3000
        'http://127.0.0.1:5173',
    ]
else:
    # For production, get these from environment variables
    CORS_ALLOWED_ORIGINS_ENV = os.environ.get('DJANGO_CORS_ALLOWED_ORIGINS')
    if CORS_ALLOWED_ORIGINS_ENV:
        CORS_ALLOWED_ORIGINS = CORS_ALLOWED_ORIGINS_ENV.split(',')
    else:
        CORS_ALLOWED_ORIGINS = [] # Should be set in production

    CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
    if CSRF_TRUSTED_ORIGINS_ENV:
        CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_ENV.split(',')
    else:
        CSRF_TRUSTED_ORIGINS = [] # Should be set in production (e.g., your frontend's domain)


# Cookie settings for cross-site requests (important if frontend and backend are on different domains/ports)
# In production with HTTPS, these should ideally be 'None' for SameSite and True for Secure.
# For local HTTP development, 'Lax' and False are usually necessary.
SESSION_COOKIE_SAMESITE = 'Lax' if DEBUG else os.environ.get('DJANGO_SESSION_COOKIE_SAMESITE', 'None')
CSRF_COOKIE_SAMESITE = 'Lax' if DEBUG else os.environ.get('DJANGO_CSRF_COOKIE_SAMESITE', 'None')
SESSION_COOKIE_SECURE = not DEBUG # True if not DEBUG (i.e., in production with HTTPS)
CSRF_COOKIE_SECURE = not DEBUG    # True if not DEBUG

# If using `rest_framework.authtoken`
# AUTH_USER_MODEL = 'auth.User' # Default, but good to be explicit if you ever change it.